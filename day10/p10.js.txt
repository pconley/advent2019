var _ = require('lodash');
var fs = require('fs');
var assert = require('assert');
var Combinatorics = require('js-combinatorics');

var log4js = require('log4js');
var logger = log4js.getLogger();
logger.level = 'trace'; // trace; debug; info, warn; error; fatal

function count(layer,val){
    return _.sum(layer.map(x=>x==val?1:0));
}

function print(lines){
  lines.forEach(line => { console.log(line) });
}

function discover(data, row, col){
  const chr = data[row][col];
  logger.trace(chr);
  const rows = data.length;
  const cols = data[0].length;
  for( var r=0; r<rows; r++ ){
    for( var c=0; c<cols; c++ ){
      if( r== row && c== col ) continue;
      if( data[r][c] != "#" ) continue;
      consider([row,col],[r,c]);
    }
  }
}

function range(a,b){
  const m = Math.min(a,b);
  const x = Math.max(a,b);
  return _.range(m,x+1);
}

function consider(p1,p2){
  const [x1,y1] = p1;
  const [x2,y2] = p2;
  console.log("can",[x1,y1],"see",[x2,y2],"?");
  
  const origin = [Math.min(x1,x2),Math.min(y1,y2)];
  const final = [Math.max(x1,x2),Math.max(y1,y2)];
  const [x0,y0] = origin;
  const [xx,yy] = final;

  const xs = range(x1,x2);
  const ys = range(y1,y2);
  console.log(xs, ys)
  var found = false;
  xs.forEach(x=>{
    ys.forEach(y=>{
      if( (x==x0 && y==y0) || (x==xx && y==yy) ){
        console.log("skip endpoint",x,y);
      } else {
        console.log(x,y);
        console.log("slope?",(x-x0)/(y-y0));
        console.log("slope=",(xx-x0)/(yy-y0));
      }
    })
  })
}

filename = process.argv[2];
fs.readFile(filename, 'utf8', function(err, contents) {
  const lines = contents.split("\n");
  const tall = lines.length;
  const wide = lines[0].length;
  console.log(tall, wide, lines[0]);
  print(lines);

  // var count = discover(lines, 2, 1); // row, col

  var cnt = consider([4,4],[1,2])

});
